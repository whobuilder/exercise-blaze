name: CMake

on: [push]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu Latest",
            os: ubuntu-latest,
            build_type: "Release", cc: "gcc", cxx: "g++"
          }
    steps:
    - uses: actions/checkout@v2

    - name: checkout fmt
      uses: actions/checkout@v2
      with:
        repository: fmtlib/fmt
        path: fmt
    - name: install blaze
      shell: cmake -P {0}
      run: |
        set(ENV{CC} ${{ matrix.config.cc }})
        set(ENV{CXX} ${{ matrix.config.cxx }})
        file(DOWNLOAD "https://bitbucket.org/blaze-lib/blaze/downloads/blaze-3.8.tar.gz" ./blaze.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xf ./blaze.zip)
        execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${{ runner.workspace }}/blaze-build)
        execute_process(COMMAND ${CMAKE_COMMAND} 
            -S ${{ runner.workspace }}/blaze-3.8
            -B ${{ runner.workspace }}/blaze-build
            -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
            -D CMAKE_INSTALL_PREFIX=${{ runner.workspace }}/third_party)
        execute_process(COMMAND ${CMAKE_COMMAND} --build ${{ runner.workspace }}/blaze-build RESULT_VARIABLE result)
        execute_process(COMMAND ${CMAKE_COMMAND} --install ${{ runner.workspace }}/blaze-build RESULT_VARIABLE result)
        if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
        endif()
      working-directory: ${{ runner.workspace }}

    - name: install fmt
      shell: cmake -P {0}
      run: | 
        execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${{ runner.workspace }}/fmt-build)
        execute_process(COMMAND ${CMAKE_COMMAND} 
            -S ${{ github.workspace }}/fmt
            -B ${{ runner.workspace }}/fmt-build
            -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
            -D CMAKE_INSTALL_PREFIX=${{ runner.workspace }}/third_party 
            -D FMT_TEST=OFF)
        execute_process(COMMAND ${CMAKE_COMMAND} --build ${{ runner.workspace }}/fmt-build RESULT_VARIABLE result)
        execute_process(COMMAND ${CMAKE_COMMAND} --install ${{ runner.workspace }}/fmt-build RESULT_VARIABLE result)
        if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
        endif()
      working-directory: ${{ runner.workspace }}

     - name: configure exercise blaze
       shell: cmake -P {0}
       run: |
        execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${{ runner.workspace }}/build)
        execute_process(COMMAND ${CMAKE_COMMAND} 
            -S ${{ github.workspace }}
            -B ${{ runner.workspace }}/build
            -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }})
        if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
        endif()
       working-directory: ${{ runner.workspace }}
     - name: build exercise-blaze   
       shell: cmake -P {0}
       run: |
        execute_process(COMMAND ${CMAKE_COMMAND} --build ${{ runner.workspace }}/build RESULT_VARIABLE result)
        if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
        endif()
       working-directory: ${{ runner.workspace }}

#    - name: Create Build Environment
#      # Some projects don't allow in-source building, so create a separate build directory
#      # We'll use this as our working directory for all subsequent commands
#      run: cmake -E make_directory ${{runner.workspace}}/build
#
#    - name: Configure CMake
#      # Use a bash shell so we can use the same syntax for environment variable
#      # access regardless of the host operating system
#      shell: bash
#      working-directory: ${{runner.workspace}}/build
#      # Note the current convention is to use the -S and -B options here to specify source
#      # and build directories, but this is only available with CMake 3.13 and higher.
#      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
#      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
#
#    - name: Build
#      working-directory: ${{runner.workspace}}/build
#      shell: bash
#      # Execute the build.  You can specify a specific target with "--target <NAME>"
#      run: cmake --build . --config $BUILD_TYPE

    #- name: Test
    #  working-directory: ${{runner.workspace}}/build
    #  shell: bash
    #  # Execute tests defined by the CMake configuration.
    #  # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #  run: ctest -C $BUILD_TYPE
